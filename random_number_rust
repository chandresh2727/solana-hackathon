//Dependencies for an toml

[dependencies]
actix-web = "x.x.x"
actix-cors = "0.5.4" # Use the appropriate version


//Logic

pub fn hashcode(string: &str, integer: i32) -> u64 {
  let mut hashcode = 0;
  for i in 0..string.len() {
    hashcode = hashcode * 10 + string.as_bytes()[i] as u64;
  }
  hashcode = hashcode * 10 + integer as u64;
  hashcode % 1000000000000000000
}

//API

//try this 

use actix_web::{web, HttpResponse, HttpServer, App};
use actix_cors::Cors;

// ... (your hashcode function)

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    HttpServer::new(|| {
        let cors = Cors::default()
            .allow_any_origin()
            .allowed_methods(vec!["GET"])
            .allowed_headers(vec![http::header::ACCEPT, http::header::CONTENT_TYPE])
            .max_age(3600);

        App::new()
            .wrap(cors)
            .service(web::resource("/hashcode").route(web::get().to(hashcode)))
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}


//use actix_web::{web, HttpResponse};
//use actix_cors::Cors;

//#[actix_web::main]
//async fn main() {
//  let app = actix_web::App::new();

//  app.get("/hashcode")
//    .and(web::get().to(hashcode));

//  app.run();
//}

async fn hashcode(web::Query(params): web::Query) -> HttpResponse {
  let string = params.get("string").unwrap();
  let integer = params.get("integer").unwrap().parse::<i32>().unwrap();

  let hashcode = hashcode(string, integer);

  HttpResponse::Ok().body(format!("X0{}", hashcode))
}


//curl -X GET "http://localhost:8080/hashcode?string=chandresh&integer=123456"
//X01234567890

